Lesson 3
========================================================

***

### What to Do First?
Notes:

***

### Pseudo-Facebook User Data
Notes:

```{r Pseudo-Facebook User Data}
getwd()
list.files()
pf<-read.csv('pseudo_facebook.tsv',sep = '\t')

```

***

### Histogram of Users' Birthdays
Notes:

```{r Histogram of Users\' Birthdays}
install.packages('ggplot2')
library(ggplot2)

names(pf)
qplot(x=dob_day,data=pf) +
  scale_x_discrete(breaks=1:31) +
  facet_wrap(~dob_month,ncol=3)

ggplot(data = pf, aes(x = dob_day)) + 
  geom_histogram() + 
  scale_x_discrete(breaks = 1:31) + 
  facet_wrap(~dob_month)

```

***

#### What are some things that you notice about this histogram?
Response:

***

### Moira's Investigation
Notes:

***

### Estimating Your Audience Size
Notes:

***

#### Think about a time when you posted a specific message or shared a photo on Facebook. What was it?
Response:

#### How many of your friends do you think saw that post?
Response:

#### Think about what percent of your friends on Facebook see any posts or comments that you make in a month. What percent do you think that is?
Response:

***

### Perceived Audience Size
Notes:

***
### Faceting
Notes:

```{r Faceting}
#one var
facet_wrap (~variable)
#two or more vars
facet_grid ( vertical ~ horizontal)
```

#### Let’s take another look at our plot. What stands out to you here?
Response:

***

### Be Skeptical - Outliers and Anomalies
Notes:
accurate data in an extream case;
bad data or limitations of data;

***

### Moira's Outlier
Notes:
#### Which case do you think applies to Moira’s outlier?
Response:

***

### Friend Count
Notes:

#### What code would you enter to create a histogram of friend counts?

```{r Friend Count}
#avoid long tail to use xlim parameter
qplot(x=friend_count,data=pf,xlim=c(0,1000))

#equivalent
qplot(x=friend_count, data=pf) +
  scale_x_continuous(limits=c(0,1000))

#bin width; adjusting bin width can drive more interesting results
qplot(x=friend_count,data=pf, binwidth = 25)
qplot(x=friend_count,data=pf) +
  scale_x_continuous(limits=c(0,1000),breaks =seq(0,1000,50))

#equivalent ggplot code
ggplot(aes(x = friend_count), data = pf) + 
  geom_histogram(binwidth = 25) + 
  scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
```

#### How is this plot similar to Moira's first plot?
Response:

***

### Limiting the Axes
Notes:

```{r Limiting the Axes}

```

### Exploring with Bin Width
Notes:

***

### Adjusting the Bin Width
Notes:

### Faceting Friend Count
```{r Faceting Friend Count}
# What code would you add to create a facet the histogram by gender?
# Add it to the code below.
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10) +
  scale_x_continuous(limits = c(0, 1000),
                     breaks = seq(0, 1000, 50)) +
  facet_wrap(~gender)
```

***

### Omitting NA Values
Notes:

```{r Omitting NA Values}

```

***

### Statistics 'by' Gender
Notes:

```{r Statistics \'by\' Gender}
table(pf$gender)
#by requires a variable, a categorical variable and the summary
by(pf$friend_count,pf$gender,summary)
```

#### Who on average has more friends: men or women?
Response:

#### What's the difference between the median friend count for women and men?
Response:

#### Why would the median be a better measure than the mean?
Response:

***

### Tenure
Notes:

```{r Tenure}
qplot(x=tenure, data=pf,
      color=I('black'),fill=I('#099DD9'))
                              
ggplot(aes(x = tenure), data = pf) + 
   geom_histogram(binwidth = 30, color = 'black', fill = '#099DD9')                              
```

***

#### How would you create a histogram of tenure by year?

```{r Tenure Histogram by Year}
#using xlab and ylab parameters
#label makes the plot more understandable
qplot(x=tenure/365, data=pf,
      xlab = 'facebook in years',
      ylab = 'count of friends',
      color=I('black'),fill=I('#099DD9')) +
      scale_x_continuous(breaks = seq(1, 7, 1),limits = c(0, 7))
       
  
```

***

### Labeling Plots
Notes:

```{r Labeling Plots}

```

***

### User Ages
Notes:

```{r User Ages}
qplot(x=age, data=pf,binwidth = 1,color=I('orange'),fill=I('#099DD9')) +
    scale_x_discrete(breaks = seq(0, 120, 5))
      


```

#### What do you notice?
Response:

***

### The Spread of Memes
Notes:

***

### Lada's Money Bag Meme
Notes:

***

### Transforming Data
"Over-dispersed" is always relative to some particular posited distribution. For example, data might be over-dispersed compared with a Poisson distribution with that mean. 
```{r}
summary(pf$friend_count)
summary(log10(pf$friend_count))
summary(log10(pf$friend_count+1))
summary(sqrt(pf$friend_count))

```

Notes:
Continuous position scales (x & y) Usage
scale_x_continuous(..., expand = waiver())
scale_y_continuous(..., expand = waiver())
scale_x_log10(...)
scale_y_log10(...)
scale_x_reverse(...)
scale_y_reverse(...)
scale_x_sqrt(...)
scale_y_sqrt(...)
***

### Add a Scaling Layer
Notes:

```{r Add a Scaling Layer}

install.packages('gridExtra') 
library(gridExtra)

p1 <- qplot(x=friend_count,data=pf)
p2 <- qplot(x=log10(friend_count +1 ),data=pf)
p3 <- qplot(x=sqrt(friend_count),data=pf)

grid.arrange(p1,p2,p3,ncol=1)

#adding a scaling layer
ggplot(aes(x=friend_count),data=pf) +
  geom_histogram() +
  scale_x_log10()

#comparison of scaling layer 
logScale<-qplot(x=log10(friend_count),data=pf) 
countScale<-ggplot(aes(x=friend_count),data=pf) +
  geom_histogram() +
  scale_x_log10()
#difference is the x axis; log10 wrapper will lable x in log10(x) unit (0,1,2,3..)
#using scale_x_log10 will label x in actual friend count(10...100..1000..)
grid.arrange(logScale,countScale,ncol=2)
```

***


### Frequency Polygons

```{r Frequency Polygons}
qplot(x=friend_count,data=subset(pf,!is.na(gender)),
      binwidth = 10) +
  scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) +
  facet_wrap(~gender)

#there are two ways to get the distribution by gender; first is to add a facet_wrap(~gender)
#second is to use geom='freqpoly' coupled with color = gender

qplot(x=friend_count,data=subset(pf,!is.na(gender)),
      binwidth = 10, geom = 'freqpoly',color = gender) +
  scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) 


qplot(x=friend_count, y = ..count../sum(..count..),
      data=subset(pf,!is.na(gender)),
      xlab = 'friend count'
      ylab = 'proportion of users with that friend count'
      binwidth = 10, 
      geom = 'freqpoly',
      color = gender) +
  scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) 

```

***

### Likes on the Web
Notes:

```{r Likes on the Web}
by(pf$www_lies, pf$gender, sum)

qplot(x=www_likes,data=subset(pf,!is.na(gender)),color = gender) +
  scale_x_continuous(lim = c(0, 500),breaks = seq(0,500,100))

qplot(x=www_likes,data=subset(pf,!is.na(gender)),
      geom = 'freqpoly',color = gender) +
  scale_x_continuous(lim = c(0,500), breaks = seq(0,500,100)) 


#correct answer
qplot(x=www_likes,data=subset(pf,!is.na(gender)),
      geom = 'freqpoly',color = gender) +
  scale_x_continuous() +
  scale_x_log10()

#Equivalent ggplot syntax: 
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
  geom_freqpoly(aes(color = gender)) + 
  scale_x_log10()


by(pf$www_likes,pf$gender,sum)

by(pf$friend_count,pf$gender,sum)
```


***

### Box Plots
Notes:

```{r Box Plots}
##histogram
qplot(x=friend_count,data=subset(pf,!is.na(gender)),
      binwidth = 25) +
  scale_x_continuous(lim = c(0,1000), breaks = seq(0,1000,50)) +
  facet_wrap(~gender)

##box plot
qplot(x=gender, y=friend_count,
      data=subset(pf,!is.na(gender)),
      geom='boxplot')+
  scale_y_continuous(lim = c(0,1000))

#or using ylim
qplot(x=gender, y=friend_count,
      data=subset(pf,!is.na(gender)),
      geom='boxplot',
      ylim=c(0,1000)) #we only want to focus on ylim = c(0,1000)
#same: scale_y_continuous(limits=c(0,1000))
#However, when we use the ylim parameter or the scale_y_continuous parameter, we actually remove data point to the calculations; so a better way to do this is to use coord_cartesian parameter. for using corrd_cartesian, the table output of BY function will match the boxplot y value, which is a subtle difference with using ylim

qplot(x=gender, y=friend_count,
      data=subset(pf,!is.na(gender)),
      geom='boxplot')+
      coord_cartesian(ylim=c(0,1000))


```

#### Adjust the code to focus on users who have friend counts between 0 and 1000.

```{r}

```

***

### Box Plots, Quartiles, and Friendships
Notes:

```{r Box Plots, Quartiles, and Friendships}

```

#### On average, who initiated more friendships in our sample: men or women?
Response:
#### Write about some ways that you can verify your answer.
Response:
```{r Friend Requests by Gender}

qplot(x=gender, y=friendships_initiated,
      data=subset(pf,!is.na(gender)),
      geom='boxplot')+
      coord_cartesian(ylim=c(0,250)) #by running the by function, the 3rd quantile of y is 244, so i choose 250 here.

by(pf$friendships_initiated,pf$gender,summary)

```

Response:

***

### Getting Logical
Notes:

```{r Getting Logical}

summary(pf$mobile_likes)

summary(pf$mobile_likes >0)
#FALSE TRUE  NA'S
#1000   2000  300

#creating a new feature
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse (pf$mobile_likes > 0,1,0)
pf$mobile_check_in <- factor (pf$mobile_check_in)
summary(pf$mobile_check_in)

#what percentage of check in using mobile?
sum(pf$mobile_check_in == 1) / length (pf$mobile_check_in)


```

Response:

***

### Analyzing One Variable
Reflection:

***

Click **KnitHTML** to see all of your hard work and to have an html
page of this lesson, your answers, and your notes!
